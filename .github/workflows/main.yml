name: KITTYGRAM CICD workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres_kittygram_user
          POSTGRES_PASSWORD: postgres_kittygram_password
          POSTGRES_DB: kittygram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-isort
          pip install -r backend/requirements.txt
          pip install flake8
      - name: Run backend tests
        env:
          POSTGRES_USER: postgres_kittygram_user
          POSTGRES_PASSWORD: postgres_kittygram_password
          POSTGRES_DB: kittygram
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  push-docker-image:
    name: "Push Docker Image to DockerHub"
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: DockerHub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker images
        run: |
          docker build -t praeitor/kittygram_backend ./backend
          docker push praeitor/kittygram_backend
          docker build -t praeitor/kittygram_frontend ./frontend
          docker push praeitor/kittygram_frontend
          docker build -t praeitor/kittygram_gateway ./nginx
          docker push praeitor/kittygram_gateway

  deploy:
    name: "Deploy"
    needs: push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.production.yml"
          target: "kittygram"
      - name: Run deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd kittygram
            sudo docker-compose -f docker-compose.production.yml pull
            sudo docker-compose -f docker-compose.production.yml down
            sudo docker-compose -f docker-compose.production.yml up -d
            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker-compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /static/static/
            sudo docker system prune -af

  # auto_tests:
  #   name: "Auto Tests"
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Run auto-tests
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         script: |
  #           cd ~/kittygram
  #           docker exec backend python manage.py test
  #           docker exec frontend npm test

  telegram-notify:
    name: "Telegram Notify"
    needs: auto_tests
    runs-on: ubuntu-latest
    steps:
      - name: Notify in Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Kittygram successfully deployed!