name: KITTYGRAM CICD workflow

on:
  push:
    branches:
      - main

jobs:
  backend_tests:
    name: "Backend tests"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.dbuser }}
          POSTGRES_PASSWORD: ${{ secrets.dbpass }}
          POSTGRES_DB: ${{ secrets.dbname }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r backend/requirements.txt
          pip install flake8
      - name: Run backend tests
        env:
          POSTGRES_USER: ${{ secrets.dbuser }}
          POSTGRES_PASSWORD: ${{ secrets.dbpass }}
          POSTGRES_DB: ${{ secrets.dbname }}
          DB_HOST: postgres
          DB_PORT: 5432
        run: |
          export SECRET_KEY='${{ secrets.SECRET_KEY }}'
          python -m flake8 backend/
          cd backend/
          python manage.py test

  frontend_tests:
    name: "Frontend tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up nodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Test frontend
        run: |
          cd frontend/
          npm run test

  push-docker-image:
    name: "Push Docker Image to DockerHub"
    needs: 
      - backend_tests
      - frontend_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: DockerHub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker images
        run: |
          docker build -t praeitor/kittygram_backend ./backend
          docker push praeitor/kittygram_backend
          docker build -t praeitor/kittygram_frontend ./frontend
          docker push praeitor/kittygram_frontend
          docker build -t praeitor/kittygram_gateway ./nginx
          docker push praeitor/kittygram_gateway

  deploy:
    name: "Deploy"
    needs: push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.production.yml"
          target: "kittygram"
      - name: Run deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd kittygram
            sudo docker-compose -f docker-compose.production.yml pull
            sudo docker-compose -f docker-compose.production.yml down
            sudo docker-compose -f docker-compose.production.yml up -d
            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            sudo docker-compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /app/static/static/
            sudo docker system prune -af

  telegram-notify:
    name: "Telegram Notify"
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Notify in Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Kittygram successfully deployed!